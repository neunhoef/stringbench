Hello, I measure performance of string and memory operations. Version: 1
.-------------------------------------------------------------------------------------------------------.
|              test              |     s1     |     s2     |  number ops  |  total time  | time per op  |
|-------------------------------------------------------------------------------------------------------|
> string_copy                    |     100001 |         32 |     64545876 |     3.08297s |         47ns |
> string_copy                    |     100001 |         80 |     61800186 |     3.08933s |         49ns |
> string_copy                    |     100001 |        257 |     55424482 |     3.07688s |         55ns |
> string_copy                    |      10001 |       1234 |     22797606 |      3.1128s |        136ns |
> string_copy                    |       1001 |    1048593 |        21631 |     2.98663s |     138071ns |
|-------------------------------------------------------------------------------------------------------|
> substr                         |     100001 |         32 |     46456997 |     2.99418s |         64ns |
> substr                         |     100001 |         80 |     45407875 |     2.98338s |         65ns |
> substr                         |     100001 |        257 |     32708357 |      2.9805s |         91ns |
> substr                         | 1073741841 |         48 |     16832053 |     2.91542s |        173ns |
> substr                         | 1073741841 |       1234 |      8647543 |     2.94244s |        340ns |
> substr                         | 1073741841 |    1626361 |         5921 |     2.99388s |     505638ns |
|-------------------------------------------------------------------------------------------------------|
> strlen                         |     100001 |         32 |    164162164 |     3.08901s |         18ns |
> strlen                         |     100001 |         80 |     88657297 |     3.06571s |         34ns |
> strlen                         |     100001 |        257 |     37480464 |      3.0074s |         80ns |
> strlen                         |      10001 |       1234 |     15847596 |      3.0296s |        191ns |
> strlen                         |       1001 |    1048593 |        26953 |     2.99069s |     110959ns |
|-------------------------------------------------------------------------------------------------------|
> memcpy                         |    1048593 |         32 |     76888923 |     3.32162s |         43ns |
> memcpy                         |    1048593 |         80 |     73751186 |     3.30267s |         44ns |
> memcpy                         |    1048593 |        257 |     65634600 |     3.26219s |         49ns |
> memcpy                         |    1048593 |       1234 |     55916945 |     3.14926s |         56ns |
> memcpy                         | 1073741841 |         32 |     20656173 |     3.03915s |        147ns |
> memcpy                         | 1073741841 |       1234 |      7900354 |     3.01802s |        382ns |
> memcpy                         | 1073741841 |      40763 |       593903 |     2.99845s |       5048ns |
|-------------------------------------------------------------------------------------------------------|
> memmove                        |    1048593 |         32 |     80007133 |     3.27718s |         40ns |
> memmove                        |    1048593 |         80 |     76547063 |     3.26517s |         42ns |
> memmove                        |    1048593 |        257 |     62984542 |     3.21089s |         50ns |
> memmove                        |    1048593 |       1234 |     37259181 |     3.11005s |         83ns |
> memmove                        | 1073741841 |         32 |     21682030 |      3.0256s |        139ns |
> memmove                        | 1073741841 |       1234 |      8004331 |     3.01434s |        376ns |
> memmove                        | 1073741841 |      40763 |       482183 |      2.9989s |       6219ns |
|-------------------------------------------------------------------------------------------------------|
> memset                         |    1048593 |         32 |    494379906 |     3.84334s |          7ns |
> memset                         |    1048593 |         80 |    310144517 |     3.56971s |         11ns |
> memset                         |    1048593 |        257 |    228732952 |     3.40295s |         14ns |
> memset                         |    1048593 |       1234 |     82752804 |     2.96812s |         35ns |
> memset                         | 1073741841 |         32 |     91634976 |     4.55073s |         49ns |
> memset                         | 1073741841 |       1234 |      9241792 |     2.61551s |        283ns |
> memset                         | 1073741841 |      40763 |       861687 |     2.99512s |       3475ns |
|-------------------------------------------------------------------------------------------------------|
> memcmp                         |    1048593 |         32 |    131672753 |     3.53918s |         26ns |
> memcmp                         |    1048593 |         80 |     59619195 |     3.24246s |         54ns |
> memcmp                         |    1048593 |        257 |     18947538 |     3.06208s |        161ns |
> memcmp                         |    1048593 |       1234 |      4172239 |     3.01395s |        722ns |
> memcmp                         | 1073741841 |         32 |     19759255 |     3.05491s |        154ns |
> memcmp                         | 1073741841 |       1234 |      3374054 |     3.00706s |        891ns |
> memcmp                         | 1073741841 |      40763 |       126189 |     3.00045s |      23777ns |
'-------------------------------------------------------------------------------------------------------'
Explanations:
    string_copy:
        Creates s1 strings of length s2 and then copies a random one to
        another random one. Tries to avoid allocations.
    substr:
        Creates a string of length s1 and then uses substr to copy
        substrings of length s2 out to a string variable. Tries to avoid
        allocations.
    strlen:
        Creates s1 strings of length s2 and then uses strlen on random ones.
    memcpy:
        Creates a memory area of size s1 and then uses memcpy to copy
        some random area of size s2 to another one (non-overlapping).
        memmove: Creates a memory area of size s1 and then uses memmove to
        copy some random area of size s2 to another one (possibly
        overlapping).
    memset:
        Creates a memory area of size s1 and then uses memset to set
        some random area of size s2 to a random byte value.
    memcmp:
        This test allocates a memory area of size `size1` bytes and
        fills it with the same byte. Then it uses memcmp to compare two
        regions of size `size2` in it. That is, all comparisons are
        equal.
